name: Deploy to AWS ECS (Fargate) with DynamoDB and S3

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up AWS CLI with your credentials
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Set up Docker Buildx (needed for multi-architecture builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          echo "Logging into Amazon ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          
          # Check if the login was successful
          if [ $? -ne 0 ]; then
            echo "ECR login failed. Please verify your AWS credentials and region."
            exit 1
          fi

      # Build and push Docker images to ECR
      - name: Build and push Docker images to ECR
        run: |
          echo "Building and pushing Docker images..."
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-name user-service || aws ecr create-repository --repository-name user-service
          aws ecr describe-repositories --repository-name product-service || aws ecr create-repository --repository-name product-service
          aws ecr describe-repositories --repository-name cart-service || aws ecr create-repository --repository-name cart-service

          # Build and push Docker images for each service
          docker build -t user-service ./user_service 
          docker tag user-service:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/user-service:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/user-service:latest

          docker build -t product-service ./product_service
          docker tag product-service:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/product-service:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/product-service:latest

          docker build -t cart-service ./cart_service
          docker tag cart-service:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/cart-service:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/cart-service:latest

      # Create DynamoDB Tables (User, Product, and Cart)
      - name: Create DynamoDB Tables
        run: |
          echo "Creating DynamoDB tables..."
          aws dynamodb create-table \
            --table-name users \
            --attribute-definitions AttributeName=user_id,AttributeType=S \
            --key-schema AttributeName=user_id,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ secrets.AWS_DEFAULT_REGION }} || echo "Users table already exists"
          
          aws dynamodb create-table \
            --table-name products \
            --attribute-definitions AttributeName=product_id,AttributeType=S \
            --key-schema AttributeName=product_id,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ secrets.AWS_DEFAULT_REGION }} || echo "Products table already exists"
          
          aws dynamodb create-table \
            --table-name carts \
            --attribute-definitions AttributeName=user_id,AttributeType=S \
            --key-schema AttributeName=user_id,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region ${{ secrets.AWS_DEFAULT_REGION }} || echo "Carts table already exists"

      # Create S3 Bucket for Product Service (for file storage)
      - name: Create S3 Bucket for Product Service
        run: |
          echo "Creating S3 bucket for product service..."
          aws s3 mb s3://microcart-products --region ${{ secrets.AWS_DEFAULT_REGION }} || echo "S3 bucket already exists"

      # Create ECS Cluster if it doesn't exist
      - name: Create ECS Cluster
        run: |
          echo "Creating ECS cluster if it doesn't exist..."
          aws ecs describe-clusters --clusters microcart-cluster || aws ecs create-cluster --cluster-name microcart-cluster

      # Register ECS Task Definitions
      - name: Register ECS Task Definitions
        run: |
          echo "Registering ECS Task Definition for user service.."
          cat > user-service-task.json <<EOF
          {
            "family": "user-service-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "user-service",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/user-service:latest",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://user-service-task.json

          echo "Registering ECS Task Definition for product service.."
          cat > product-service-task.json <<EOF
          {
            "family": "product-service-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "product-service",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/product-service:latest",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://product-service-task.json

          echo "Registering ECS Task Definition for cart service.."
          cat > cart-service-task.json <<EOF
          {
            "family": "cart-service-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "cart-service",
                "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/cart-service:latest",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://cart-service-task.json

      # Create ECS Services using secrets for subnets and security groups
      - name: Create ECS Services
        run: |
          echo "Creating ECS services for User, Product, and Cart..."
          aws ecs create-service \
            --cluster microcart-cluster \
            --service-name user-service \
            --task-definition user-service-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNETS }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUPS }}],assignPublicIp=ENABLED}"

          aws ecs create-service \
            --cluster microcart-cluster \
            --service-name product-service \
            --task-definition product-service-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNETS }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUPS }}],assignPublicIp=ENABLED}"

          aws ecs create-service \
            --cluster microcart-cluster \
            --service-name cart-service \
            --task-definition cart-service-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNETS }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUPS }}],assignPublicIp=ENABLED}"

      # Output ECS Service URL
      - name: Output ECS service URLs
        run: |
          echo "User Service URL: http://$(aws ecs describe-services --cluster microcart-cluster --services user-service --query 'services[0].loadBalancers[0].dnsName' --output text)"
          echo "Product Service URL: http://$(aws ecs describe-services --cluster microcart-cluster --services product-service --query 'services[0].loadBalancers[0].dnsName' --output text)"
          echo "Cart Service URL: http://$(aws ecs describe-services --cluster microcart-cluster --services cart-service --query 'services[0].loadBalancers[0].dnsName' --output text)"
