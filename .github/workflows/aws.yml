name: Deploy MicroCart to AWS ECS

on:
  push:
    branches:
      - main  # Deploy only when pushing to the main branch

env:
  AWS_REGION: eu-north-1
  CLUSTER_NAME: microcart
  SUBNETS: ${{ secrets.SUBNETS }}
  SECURITY_GROUP: ${{ secrets.SECURITY_GROUP }}
  ECR_REPOSITORY: microcart
  TASK_ROLE_ARN: arn:aws:iam::448049790780:role/ecsTaskExecutionRole

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 448049790780.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build, Tag, and Push Docker Images
      run: |
        for SERVICE in user_service cart_service product_service; do
          IMAGE_URI="448049790780.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$SERVICE"
          docker build -t $IMAGE_URI ./$SERVICE
          docker push $IMAGE_URI
        done

    - name: Register ECS Task Definitions
      run: |
        for SERVICE in user-service cart-service product-service; do
          TASK_JSON=$(cat <<EOF
          {
            "family": "$SERVICE",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "executionRoleArn": "$TASK_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "$SERVICE",
                "image": "448049790780.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$SERVICE",
                "portMappings": [
                  { "containerPort": ${SERVICE: -1}001, "hostPort": ${SERVICE: -1}001 }
                ],
                "environment": [
                  {"name": "AWS_REGION", "value": "$AWS_REGION"},
                  {"name": "AWS_ACCESS_KEY_ID", "value": "dummy"},
                  {"name": "AWS_SECRET_ACCESS_KEY", "value": "dummy"},
                  {"name": "DYNAMODB_ENDPOINT_URL", "value": "http://host.docker.internal:8000"},
                  {"name": "USER_SERVICE_URL", "value": "http://host.docker.internal:8001"},
                  {"name": "PRODUCT_SERVICE_URL", "value": "http://host.docker.internal:8002"}
                ]
              }
            ]
          }
          EOF
          )
          echo "$TASK_JSON" > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json
        done

    - name: Deploy ECS Services
      run: |
        for SERVICE in user-service cart-service product-service; do
          aws ecs create-service --cluster $CLUSTER_NAME --service-name $SERVICE \
            --task-definition $SERVICE --desired-count 1 --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}"
        done
